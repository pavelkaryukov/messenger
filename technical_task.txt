Мессенджер.
1. Клиентская часть.
    1.1. Модуль залогинивания.
        - сетевая часть
        - БД (Логины всех успешно залогиненых + пароль последнего)
    1.2 Модуль приема-отправки сообщений.
        - Прием    (Забор всех сообщений с сервера, адресованых клиенту)
        - Отправка (Сообщение уходит на сервер, клиент которому оно адресовано его заберет) 
    1.3. Модуль логирования сообщений
        (Хранит лог отправленных и принятых сообщений по каждому клиенту)
        - БД (клиент + тип сообщения + время отправки  + тело соолбения)
        -Тело сообщения 
            * файл(в таком случае размер + имя)
            * текстовое сообщение (текст сообщения)

2. Серверная часть.
    2.1. Модуль залогинивания - регистрации.
        - сетевая часть
        - БД - хранит логины и пароли клиентов
    2.2. Модуль приема-отправки-пересылки сообщений
        (Сервер принимает сообщение от клиента и пересылает его другому клиенту)
    2.3. Модуль логирования сообщений
        (Хранит лог отправленных и принятых сообщений по каждой сессии (клиент - клиент))
        -Лог клиента по сессиям (может хранить id сессий, а сессиилогировать в отдельной бд/таблице)
        -дата регистрации клиента
        -дата последнего входа
    2.4. БД Сообщений
        - Хранит сообщения, пока клиент их не заберет
    2.5. Распределение нагрузки на несколько серверов (Опционально)

3. Протокол передачи данных
    TLV протокол с контролем целостности данных и возможностью передавать файлы 
    Предположительная структура:
        [AdrSrc][AdrDst][Type][EncryptFlg][PayloadLen][Payload][CheckSum]
    Предположительные типы: Логин, Регистрация, Сообщение, файл...

Опционально: Реализовать политику безопасности (по типу Transec - генерация ключа, ассимитричное и блочное шифрование)

///////////////////////////////////
///////////////////////////////////
///////////////////////////////////
///////////////////////////////////
4. Мессенджер (без GUI, потому что это муторно и не особо интересно)
Собственно, все знают, что такое мессенджер.
Уровни развития:
4.1. Соединение точка-точка
- гарантированная доставка сообщений
- уведомление "пользователь печатает"
- сохранение локальной истории
- опционально передача файлов (как же без котиков)
4.2. Клиент-серверная архитектура
- регистрация
- хранение истории пользователя на сервере
4.3. Распределённая архитектура
- несколько серверов
4.4. Балансировки нагрузки.